--- src/Terraria/Terraria/NPC.cs
+++ src/tStandalone/Terraria/NPC.cs
@@ -24,6 +_,7 @@
 
 namespace Terraria
 {
+	// TODO: Literally all of the old NPC.cs patch
 	public class NPC : Entity
 	{
 		private const int NPC_TARGETS_START = 300;
@@ -43,7 +_,7 @@
 		public static int maxAI = 4;
 		public int netSpam;
 		public static int goldCritterChance = 400;
-		public static int[] killCount = new int[663];
+		public static int[] killCount = new int[NPCID.Count];
 		public static float waveKills = 0f;
 		public static int waveNumber = 0;
 		public const float nameOverIncrement = 0.025f;
@@ -110,7 +_,7 @@
 		public const int maxBuffs = 5;
 		public int[] buffType = new int[5];
 		public int[] buffTime = new int[5];
-		public bool[] buffImmune = new bool[323];
+		public bool[] buffImmune = new bool[BuffID.Count];
 		public bool midas;
 		public bool ichor;
 		public bool onFire;
@@ -197,7 +_,7 @@
 		public static bool downedMechBoss1 = false;
 		public static bool downedMechBoss2 = false;
 		public static bool downedMechBoss3 = false;
-		public static bool[] npcsFoundForCheckActive = new bool[663];
+		public static bool[] npcsFoundForCheckActive = new bool[NPCID.Count];
 		public static int[] lazyNPCOwnedProjectileSearchArray = new int[200];
 		private static int spawnRate = defaultSpawnRate;
 		private static int maxSpawns = defaultMaxSpawns;
@@ -649,7 +_,7 @@
 		public static void UpdateFoundActiveNPCs() {
 			for (int i = 0; i < 200; i++) {
 				NPC nPC = Main.npc[i];
-				if (nPC.active && nPC.type >= 0 && nPC.type < 663)
+				if (nPC.active && nPC.type >= 0 && nPC.type < NPCID.Count)
 					npcsFoundForCheckActive[nPC.type] = true;
 			}
 
@@ -2837,7 +_,7 @@
 				buffType[k] = 0;
 			}
 
-			for (int l = 0; l < 323; l++) {
+			for (int l = 0; l < BuffID.Count; l++) {
 				buffImmune[l] = false;
 			}
 
@@ -10878,7 +_,7 @@
 
 				noGravity = true;
 				rarity = 2;
-				for (int num2 = 0; num2 < 323; num2++) {
+				for (int num2 = 0; num2 < BuffID.Count; num2++) {
 					buffImmune[num2] = true;
 				}
 			}
@@ -11612,7 +_,7 @@
 			}
 
 			if (flag) {
-				for (int num4 = 0; num4 < 323; num4++) {
+				for (int num4 = 0; num4 < BuffID.Count; num4++) {
 					buffImmune[num4] = true;
 				}
 			}
@@ -37883,7 +_,7 @@
 					break;
 			}
 
-			if (type >= 0 && type < 663 && NPCID.Sets.TownCritter[type] && target == 255) {
+			if (type >= 0 && type < NPCID.Count && NPCID.Sets.TownCritter[type] && target == 255) {
 				TargetClosest();
 				if (position.X < Main.player[target].position.X) {
 					base.direction = 1;
@@ -56555,7 +_,7 @@
 		}
 
 		public static void ResetKillCount() {
-			for (int i = 0; i < 663; i++) {
+			for (int i = 0; i < NPCID.Count; i++) {
 				killCount[i] = 0;
 			}
 		}
@@ -56588,7 +_,7 @@
 		}
 
 		public void NPCLootOld() {
-			if (Main.netMode == 1 || type >= 663)
+			if (Main.netMode == 1 || type >= NPCID.Count)
 				return;
 
 			bool flag = false;
@@ -56648,7 +_,7 @@
 
 			if (type == 1 && ai[1] > 0f) {
 				int num3 = (int)ai[1];
-				if (num3 > 0 && num3 < 5045) {
+				if (num3 > 0 && num3 < ItemID.Count) {
 					int stackForSlimeItemDrop = GetStackForSlimeItemDrop(num3);
 					Item.NewItem((int)position.X, (int)position.Y, width, height, num3, stackForSlimeItemDrop);
 				}
@@ -59122,7 +_,7 @@
 		}
 
 		public void NPCLoot() {
-			if (Main.netMode == 1 || type >= 663)
+			if (Main.netMode == 1 || type >= NPCID.Count)
 				return;
 
 			Player closestPlayer = Main.player[Player.FindClosest(position, width, height)];
@@ -60205,7 +_,7 @@
 				NetMessage.SendData(71, -1, -1, null, x, y, Type, Style);
 			}
 			else {
-				if (Type < 0 || Type >= 663 || !Main.npcCatchable[Type] || !CanReleaseNPCs(who))
+				if (Type < 0 || Type >= NPCID.Count || !Main.npcCatchable[Type] || !CanReleaseNPCs(who))
 					return;
 
 				switch (Type) {
@@ -71263,7 +_,7 @@
 		}
 
 		public void RequestBuffRemoval(int buffTypeToRemove) {
-			if (buffTypeToRemove < 0 || buffTypeToRemove >= 323 || !BuffID.Sets.CanBeRemovedByNetMessage[buffTypeToRemove])
+			if (buffTypeToRemove < 0 || buffTypeToRemove >= BuffID.Count || !BuffID.Sets.CanBeRemovedByNetMessage[buffTypeToRemove])
 				return;
 
 			int num = FindBuffIndex(buffTypeToRemove);
